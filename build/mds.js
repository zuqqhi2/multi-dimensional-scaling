// Generated by CoffeeScript 1.6.3
(function() {
  var DataPoint, Point2D, PointCloud, main;

  Point2D = (function() {
    function Point2D(x, y, r, vx, vy, label, wnd_width, wnd_height, context) {
      this.x = x;
      this.y = y;
      this.r = r;
      this.vx = vx;
      this.vy = vy;
      this.label = label;
      this.wnd_width = wnd_width;
      this.wnd_height = wnd_height;
      this.context = context;
    }

    Point2D.prototype.update_position = function() {
      this.x += this.vx;
      return this.y += this.vy;
    };

    Point2D.prototype.get_data = function() {
      return [this.x, this.y];
    };

    Point2D.prototype.calc_distance = function(p) {
      return Math.pow(this.x - p.x, 2) + Math.pow(this.y - p.y, 2);
    };

    Point2D.prototype.draw = function() {
      this.context.beginPath();
      this.context.strokeStyle = '#00F';
      this.context.fillStyle = 'green';
      this.context.arc(this.x, this.y, this.r, 0, Math.PI * 2, false);
      this.context.fill();
      this.context.stroke();
      this.context.restore();
      this.context.beginPath();
      this.context.font = "18px 'MS Pゴシック'";
      this.context.fillStyle = "red";
      this.context.fillText(this.label, this.x, this.y - (this.r * 2));
      return this.context.restore();
    };

    Point2D.prototype.draw_with_scaling = function(max, min) {
      var prevX, prevY;
      prevX = this.x;
      prevY = this.y;
      this.x = (this.x - min[0]) / (max[0] - min[0]) * this.wnd_width;
      this.y = (this.y - min[1]) / (max[1] - min[1]) * this.wnd_height;
      this.draw();
      this.x = prevX;
      return this.y = prevY;
    };

    return Point2D;

  })();


  DataPoint = (function() {
    function DataPoint(data, label, column_name) {
      this.data = data;
      this.label = label;
      this.column_name = column_name;
    }

    DataPoint.prototype.calc_distance = function(dp) {
      var i, sum, _i, _ref;
      sum = 0.0;
      for (i = _i = 0, _ref = this.data.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        sum += Math.pow(this.data[i] - dp.data[i], 2);
      }
      return Math.sqrt(sum);
    };

    DataPoint.prototype.get_data = function() {
      return this.data;
    };

    DataPoint.prototype.draw = function() {};

    DataPoint.prototype.draw_with_scaling = function() {};

    return DataPoint;

  })();


  PointCloud = (function() {
    function PointCloud(points) {
      var i, j, _i, _j, _ref, _ref1;
      this.points = points;
      this.distances = [];
      for (i = _i = 0, _ref = points.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        this.distances.push([]);
        for (j = _j = 0, _ref1 = points.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
          this.distances[i].push(0.0);
        }
      }
    }

    PointCloud.prototype.calc_distance = function() {
      var i, j, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = this.points.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (j = _j = 0, _ref1 = this.points.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
            _results1.push(this.distances[i][j] = this.points[i].calc_distance(this.points[j]));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    PointCloud.prototype.draw_points = function() {
      var i, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = this.points.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push(this.points[i].draw());
      }
      return _results;
    };

    PointCloud.prototype.draw_points_with_scaling = function() {
      var i, j, max, min, _i, _j, _k, _ref, _ref1, _ref2, _results;
      max = this.points[0].get_data();
      min = this.points[0].get_data();
      for (i = _i = 0, _ref = this.points.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        for (j = _j = 0, _ref1 = max.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
          if (max[j] > this.points[i].get_data()[j]) {
            max[j] = this.points[i].get_data()[j];
          }
          if (min[j] < this.points[i].get_data()[j]) {
            min[j] = this.points[i].get_data()[j];
          }
        }
      }
      _results = [];
      for (i = _k = 0, _ref2 = this.points.length - 1; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; i = 0 <= _ref2 ? ++_k : --_k) {
        _results.push(this.points[i].draw_with_scaling(max, min));
      }
      return _results;
    };

    return PointCloud;

  })();





  main = function() {
    var canvas, context, data_points, endflg, fakepc, i, key, keys, lasterror, mainloop, num_points, points, rate, realpc, vx, vy, x, y, _i, _j, _ref, _ref1;
    canvas = document.getElementById('canvas');
    context = canvas.getContext('2d');
    keys = [];
    for (key in blog_data) {
      keys.push(key);
    }
    num_points = keys.length;
    data_points = [];
    for (i = _i = 0, _ref = num_points - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      data_points.push(new DataPoint(blog_data[keys[i]], keys[i], column_name));
    }
    realpc = new PointCloud(data_points);
    points = [];
    for (i = _j = 0, _ref1 = num_points - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
      x = canvas.width / 2 + Math.floor(Math.random() * 200) - 100;
      y = canvas.height / 2 + Math.floor(Math.random() * 200) - 100;
      vx = 0.0;
      vy = 0.0;
      points.push(new Point2D(x, y, 2, vx, vy, keys[i], canvas.width, canvas.height, context));
    }
    fakepc = new PointCloud(points);
    fakepc.draw_points_with_scaling();
    realpc.calc_distance();
    fakepc.calc_distance();
    lasterror = 0.0;
    rate = 0.0001;
    endflg = false;
    mainloop = function() {
      var errorterm, j, totalerror, _k, _l, _m, _ref2, _ref3, _ref4;
      context.save();
      context.beginPath();
      context.clearRect(0, 0, canvas.width, canvas.height);
      context.restore();
      if (endflg) {
        fakepc.draw_points_with_scaling();
      } else {
        totalerror = 0;
        fakepc.calc_distance();
        for (i = _k = 0, _ref2 = num_points - 1; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; i = 0 <= _ref2 ? ++_k : --_k) {
          for (j = _l = 0, _ref3 = num_points - 1; 0 <= _ref3 ? _l <= _ref3 : _l >= _ref3; j = 0 <= _ref3 ? ++_l : --_l) {
            if (i === j) {
              continue;
            }
            errorterm = (fakepc.distances[j][i] - realpc.distances[j][i]) / realpc.distances[j][i];
            points[i].vx += ((points[i].x - points[j].x) / fakepc.distances[j][i]) * errorterm;
            points[i].vy += ((points[i].y - points[j].y) / fakepc.distances[j][i]) * errorterm;
            totalerror += Math.abs(errorterm);
          }
        }
        console.log(totalerror);
        if (lasterror > 1.0 && lasterror < totalerror) {
          endflg = true;
        } else {
          lasterror = totalerror;
          for (i = _m = 0, _ref4 = num_points - 1; 0 <= _ref4 ? _m <= _ref4 : _m >= _ref4; i = 0 <= _ref4 ? ++_m : --_m) {
            points[i].x -= rate * points[i].vx;
            points[i].y -= rate * points[i].vy;
          }
          fakepc.draw_points_with_scaling();
        }
      }
      return setTimeout(mainloop, 30);
    };
    return mainloop();
  };

  window.onload = main;

}).call(this);
